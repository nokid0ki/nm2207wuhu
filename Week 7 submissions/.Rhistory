setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/1 UNI STUFF/NM2207/Week 7")
install.packages("rmarkdown")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
glimpse(penguins)
install.packages("palmerpenguins")
library(palmerpenguins)
glimpse(penguins)
library(ggplot2)
ggplot(data = penguins)
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chin
x = "Bill depth (mm)", y = "Bill length
subtitle = "Dimensions for Adelie, Chin"
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chin"
x = "Bill depth (mm)", y = "Bill length
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chin"
x = "Bill depth (mm)", y = "Bill length"
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chin"
x = "Bill depth (mm)", y = "Bill length")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chin",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER") +
scale_colour_viridis_d()
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species)) +
geom_point() +
labs(title = "Bill depth and length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
colour = "Species",
caption = "Source: Palmer Station LTER") +
scale_colour_viridis_d()
ggplot(penguins) + # Data layer aes(x = bill_depth_mm,
y = bill_length_mm,
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
colour = species) +
geom_point() +
scale_colour_viridis_d()
ggplot(penguins) + aes(x = bill_depth_mm, y = bill_length_mm,
colour = species) +
geom_point() + scale_colour_viridis_d()
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = island)) +
geom_point() + scale_colour_viridis_d()
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = species)) +
geom_point() + scale_colour_viridis_d()
ggplot(penguins, aes(x = bill_depth_mm,  y = bill_length_mm, colour = species, shape = species,
size = body_mass_g)) +
geom_point() + scale_colour_viridis_d()
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, colour = species,
shape = species, size = body_mass_g, alpha = flipper_length_mm)) +
geom_point() + scale_colour_viridis_d()
#Mapping
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
geom_point()
size = body_mass_g,
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm,
size = body_mass_g,
alpha = flipper_length_mm) +
geom_point()
#Setting
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point(size = 2, alpha = 0.5)
#Faceting
ggplot(penguins) +
aes(x = bill_depth_mm,
y = bill_length_mm) +
geom_point() +
facet_grid(species ~ island)
#Facet 2
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point() +
facet_grid(species ~ sex)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point() +
facet_grid(sex ~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point() +
facet_wrap(~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point() +
facet_wrap(~ species, ncol = 2)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm)) + geom_point() +
facet_grid(. ~ species)
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() + facet_grid(species ~ sex) + scale_color_viridis_d()
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() + facet_grid(species ~ sex) + scale_color_viridis_d() +
guides(color = "none")
library(openintro)
glimpse(loans_full_schema)
loans <- loans_full_schema %>%
select(loan_amount, interest_rate, term, grade,
state, annual_income, homeownership, debt_to_income)
glimpse(loans)
ggplot(loans) + aes(x = loan_amount) +
geom_histogram()
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 1000)
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 5000)
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 20000)
ggplot(loans, aes(x = loan_amount)) + geom_histogram(binwidth = 5000) +
labs(x = "Loan amount ($)", y = "Frequency", title = "Amounts of Lending Club loans" )
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans")
ggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +
geom_point() + facet_grid(species ~ sex) + scale_color_viridis_d(option="plasma")
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 20000) +
scale_fill_viridis_d()
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_histogram(binwidth = 5000, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Frequency",title = "Amounts of Lending Club loans") +
scale_fill_viridis_d()
ggplot(loans, aes(x = loan_amount)) +
geom_density(adjust = 2) +
labs( x = "Loan amount ($)", y = "Density", title = "Amounts of Lending Club loans" )
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeo
w
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeow")
ggplot(loans, aes(x = loan_amount, fill = homeownership)) +
geom_density(adjust = 2, alpha = 0.5) +
labs(x = "Loan amount ($)",y = "Density",title = "Amounts of Lending Club loans", fill = "Homeownership")
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans %>% filter(debt_to_income < 100),
aes(x = debt_to_income, y = interest_rate)) +
geom_hex()
ggplot(loans, aes(x = homeownership,
fill = grade)) +
geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) +
geom_bar()
ggplot(loans, aes(x = homeownership,
fill = grade)) +
geom_bar()
library(ggridges)
install.packages("ggridges")
install.packages("ggridges")
library(ggridges)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.5)
install.packages("ggridges")
library(ggridges)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 1)
install.packages("ggridges")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggridges")
library(ggridges)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.8)
library(ggplot2)
install.packages("ggridges")
library(ggridges)
library(ggplot2)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.8)
install.packages("ggridges")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("palmerpenguins")
library(palmerpenguins)
glimpse(penguins)
ggplot(data = penguins)
ggplot(loans, aes(x = loan_amount)) +
geom_histogram(binwidth = 20000) +
install.packages("ggridges")
library(ggridges)
library(ggplot2)
ggplot(loans, aes(x = loan_amount, y = grade, fill = grade, color = grade)) +
geom_density_ridges(alpha = 0.8)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/1 UNI STUFF/NM2207/Week 8")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
library(shiny)
runExample("01_hello")
# Install package
install.packages("shiny")
library(shiny)
runExample("01_hello")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
library(shiny)
runExample("01_hello")
# Install package
install.packages("shiny")
library(shiny)
runExample("02_text")
install.packages("shiny")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/1 UNI STUFF/NM2207/Week 8")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
library(shiny)
runExample("02_text")
# Install package
install.packages("shiny")
library(shiny)
runExample("02_text")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
# Install package
install.packages("shiny")
library(shiny)
runExample("02_text")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/1 UNI STUFF/NM2207/Week 8")
# Install package
install.packages("shiny")
library(shiny)
runExample("02_text")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
# Install package
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('Week 8.R')
runApp("App")
runApp("App")
runApp("App")
runApp("[app name]", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runExample("11_timer")
# Install package
install.packages("shiny")
library(shiny)
runExample("03_reactivity")
install.packages("shiny")
runExample("07_widgets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("04_mpg")
runApp('App')
runApp('App')
p("huh"),
ui <- fluidPage(
runApp("[app name]", display.mode = "showcase")
ui <- fluidPage(
runApp("[app name]", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runApp("App", display.mode = "showcase")
paste("Square:", number^2)
runApp("App", display.mode = "showcase")
runExample("04_mpg")
# Create Shiny app ----
shinyApp(ui, server)
runApp("App", display.mode = "showcase")
runApp("app", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runApp("App", display.mode = "showcase")
runApp('App')
runExample("07_widgets")
runExample("11_timer")
runApp('App')
runApp('App')
runExample("11_timer")
runApp('App')
runApp('App')
runExample("07_widgets")
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
# Install package
install.packages("shiny")
library(shiny)
runExample("09_upload")
install.packages("shiny")
# Install package
install.packages("shiny")
library(shiny)
runExample("05_sliders")
install.packages("shiny")
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
shiny::runApp('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/1 UNI STUFF/NM2207/Week 8/App')
