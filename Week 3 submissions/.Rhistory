cat_lovers
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
?mean
as.integer(cat_lovers$number_of_cats)
cat_lovers$number_of_cats
as.numeric(cat_lovers$number_of_cats)
# Method 1
x <- vector("logical",length=5)
# Method 1
x <- vector("logical",length=5)
print(x)
# Display the type of x
print(typeof(x))
x <- logical(7)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x <- int(7)
x <- integer(7)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x <- chr(7)
# Display the contents of x
print(x)
# Display the contents of x
print(x)
x <- ("hello")
# Display the contents of x
print(x)
# Display the contents of x
print(x)
# Display the contents of x
print(x*7)
# Display the contents of x
print(x**7)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x <- vector("character", length=6)
print(x)
# Display the type of x
print(typeof(x))
x <- character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x <- c('A','b','E','z','t')
print(x)
print(typeof(x))
x<-vector("logical",length=5)
print(x)
print(typeof(x))
x<-logical(50)
print(x)
print(typeof(x))
x<-c(T,F,T,F,T,F,T)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-vector("integer",length=5)
print(x)
print(typeof(x))
x<-integer(5)
print(x)
print(typeof(x))
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-seq(from=1,to=5,by=0.1)
print(x)
print(typeof(x))
x<-c(1L,2L,3L,4L,5L)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
x<-seq(from=1L,to=5L,by=0.1L)
print(x)
print(typeof(x))
x<-seq(from=1L,to=5L,by=0.1)
print(x)
print(typeof(x))
x<-1:4
print(x)
print(typeof(x))
x<-vector("double",length=5)
print(x)
print(typeof(x))
x<-double(5)
print(x)
print(typeof(x))
x<-c(1.787,0.63573,2.3890)
print(x)
print(typeof(x))
x<-c(1.5)
# Check the type of x
print(typeof(x))
x<-c(x,'a')
# Check the type of x
typeof(x)
x<-c(T)
# Check the type of x
print(typeof(x))
x<-c(x,2)
# Check the type of x
print(typeof(x))
x<-c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x<-(c,T)
# Add a logical value to the vector
x<-c(x,T)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x<-as.numeric(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x<-as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<(10)]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
my_pie[["type"]]
# Install package
install.packages("openintro")
# Install package
install.packages("openintro")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
knitr::opts_chunk$set(echo = TRUE)
x <- (10,15.5,"20",T)
x <- c(10,15.5,"20",T)
typeof(x)
x <- c(20.5,15,"25")
x <- as.numeric(x[3])
x <- as.numeric(x[3])
x[3]
x[2]
x <- c(20.5,15,"25")
x <- as.numeric(x[3])
x <- c(20.5,15,"25")
x[2]
x[3]
x <- as.numeric(x)
x <- c(20.5,15,"25")
x[3]
x <- as.numeric(x)
typeof(x)
vec1 <- c(5,10,15)
vec2 <- c("apple","banana","cheryl")
c(vec1,vec2)
y <- c(vec1,vec2)
y <- c(vec1,vec2)
typeof(y)
vec1 <- c(5,10,15)
vec2 <- c("apple","banana","cheryl")
y <- c(vec1,vec2)
typeof(y)
y[2]
sum(x)
x <- c(7,12.5,"15.7")
sum(x)
x[3]
y <- x[3]
sum(x)
y <- x[3]
as.numeric(y)
sum(x)
as.numeric(x)
sum(x)
x <- c(7,12.5,"15.7")
as.numeric(x)
sum(x)
y < - as.numeric(x)
sum(y)
as.numeric(x)
sum(as.numeric(x))
x <- c(7,12.5,"15.7")
sum(x)
sum(as.numeric(x))
grades <- c(85,90.5,"75.2")
mean(as.numeric(grades))
mean(as.numeric(mixed_data))
mixed_data <- c(10,20,30,"red","green","blue",T,F,T)
mean(as.numeric(mixed_data))
mixed_data <- c(10,20,30,"red","green","blue",T,F,T)
mean(as.numeric(mixed_data))
mixed_data[3]
mixed_data[1:3]
y <- mixed_data[1:3]
mean(y)
mean(y)
mean(as.numeric(y))
mixed_data[x=double]
mixed_data[double]
mixed_data[integer]
mixed_data[numeric]
mixed_data[mixed_data=type(numeric)]
mixed_data[mixed_data=typeof(numeric)]
mixed_data[mixed_data=typeof(numeric)]
mixed_data[mixed_data=typeof(double)]
mixed_data[mixed_data>0]
mixed_data[mixed_data=double]
mixed_data[(mixed_data=double)]
mixed_data[mixed_data=numeric]
mixed_data[mixed_data=(mode='numeric')]
mixed_data[mixed_data=(mode='double')]
mixed_data[mixed_data=(mode='double')]
means <- sapply(mixed_data, mean)
print(means)
means <- sapply(mixed_data, mean)
print(means)
mixed_data <- list(
numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE)
)
numeric_mean <- mean(mixed_data$numeric_vector)
print(numeric_mean)
num_values <- rnorm(10)  # You can replace 10 with the desired length of the vector
# Access and print the last element of the vector
last_element <- num_values[length(num_values)]
print(last_element)
# Given character vector
words <- c("apple", "banana", "cherry", "apple")
# Find indices of occurrences of "apple"
apple_indices <- which(words == "apple")
# Print the indices
print(apple_indices)
ages <- c(25, 40, 18, 50, 32, 28, 37, 22)
# Extract and print ages older than 30
older_than_30 <- ages[ages > 30]
print(older_than_30)
# Given numeric vector
sequence <- 1:20
# Extract and print every third element
every_third <- sequence[seq(3, length(sequence), by = 3)]
print(every_third)
# Given numeric vectors
vector1 <- c(10, 25, 8, 16, 30)
vector2 <- c(12, 20, 6, 14, 28)
# Create a logical vector for element-wise comparison
comparison_result <- vector1 > vector2
# Print the comparison results
print(comparison_result)
# Given numeric vector
numbers <- c(10, 25, 8, 15, 30, 17, 20)
# Create a logical vector for divisibility by 5
divisible_by_5 <- numbers %% 5 == 0
# Print the numbers that are divisible by 5
print(numbers[divisible_by_5])
# Given character vector
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "grape")
# Create a logical vector for names longer than 6 characters
long_names <- nchar(fruits) > 6
# Print the long fruit names
print(fruits[long_names])
# Given numeric vector
temperatures <- c(85, 92, 88, 95, 89, 91, 87, 93, 86, 98)
# Create a logical vector for temperatures above 90 degrees
hot_days <- temperatures > 90
# Count the total number of hot days
total_hot_days <- sum(hot_days)
# Print the total number of hot days
print(total_hot_days)
data <- c(10, NA, 15, 20)
# Check if the second element is missing (NA)
is_missing <- is.na(data[2])
# Print the result
print(is_missing)
# Create the list with student information
student_info <- list(
names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE)
)
# Create the list with student information
student_info <- list(
names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE)
)
# Create the list with student information
student_info <- list(
names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE)
)
# Extract and print the score of the student named "Bob"
bob_index <- which(student_info$names == "Bob")
bob_score <- student_info$scores[bob_index]
print(bob_score)
x <- c(T,T,F)
ages <- as.numeric(25,30,22,28,33)
print(ages)
ages <- as.numeric(25,30,22,28,33)
print(ages)
ages <- as.numeric(25,30,22,28,33)
print(ages)
```
```
ages <- as.numeric(25,30,22,28,33)
print(ages)
print(comparison_result)
numbers <- c(10, 25, 8, 15, 30, 17, 20)
divisible_by_5 <- numbers %% 5 == 0
print(numbers[divisible_by_5])
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "grape")
long_names <- nchar(fruits) > 6
print(fruits[long_names])
temperatures <- c(85, 92, 88, 95, 89, 91, 87, 93, 86, 98)
hot_days <- temperatures > 90
total_hot_days <- sum(hot_days)
print(total_hot_days)
data <- c(10, NA, 15, 20)
is_missing <- is.na(data[2])
print(is_missing)
x <- c(1:10)
print(x)
x[4:8]
sequence <- 1:20
every_third <- sequence[seq(3, length(sequence), by = 3)]
print(every_third)
x <- 1:10
x[4:8]
ages <- c(25, 40, 18, 50, 32, 28, 37, 22)
older_than_30 <- ages[ages > 30]
print(older_than_30)
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- which(words == "apple")
print(apple_indices)
num_values <- rnorm(12)
last_element <- num_values[length(num_values)]
print(last_element)
num_values <- rnorm(12)
last_element <- num_values[length(num_values)]
print(last_element)
student_info <- list(
names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE)
)
bob_index <- which(student_info$names == "Bob")
bob_score <- student_info$scores[bob_index]
print(bob_score)
preferredChannel <- factor(c("email", "phone", "social media", "email", "phone"))
print(preferredChannel)
sum(as.numeric(x))
sum(x)
x <- c(7,12.5,"15.7")
sum(x)
sum(as.numeric(x))
?rnorm
name <- c("Alice","Bob","Catherine")
print(name)
score <- c(85,92,78)
print(score)
pass <- c(T,T,F)
print(pass)
list(name,score,pass)
list(name,score,pass)
typeof(x)
typeof(x[1])
typeof(data[1])
typeof(data[2])
typeof(data[4])
typeof(data[4])
typeof(data[1])
typeof(data[2])
data <- c(10,15.5,"20",T)
typeof(data[1])
typeof(data[2])
typeof(data[3])
typeof(data[4])
typeof(x)
knitr::opts_chunk$set(echo = TRUE)
typeof(y)
y[2]
typeof(y)
y <- c(vec1,vec2)
typeof(y)
\usepackage[utf8]{inputenc}
{r, message = FALSE}
mean(as.numeric(grades))
print(numeric_mean)
numeric_mean <- mean(mixed_data$numeric_vector)
print(numeric_mean)
numeric_mean <- mean(mixed_data$numeric_vector)
mean(mixed_data$numeric_vector)
mean(mixed_data$numeric_vector)
print(bob_score)
print(bob_score)
print(bob_score)
print(bob_score)
print(last_element)
print(last_element)
# Enter code here
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- which(words == "apple")
print(apple_indices)
x[4:8]
x <- 1:10
x[4:8]
# Enter code here
x <- c(1:10)
x[4:8]
x[5:7]
# Enter code here
temperatures <- c(85, 92, 88, 95, 89, 91, 87, 93, 86, 98)
hot_days <- temperatures > 90
total_hot_days <- sum(hot_days)
print(total_hot_days)
# Enter code here
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "grape")
long_names <- nchar(fruits) > 6
print(fruits[long_names])
print(fruits[long_names])
# Enter code here
vector1 <- c(10, 25, 8, 16, 30)
vector2 <- c(12, 20, 6, 14, 28)
comparison_result <- vector1 > vector2
print(comparison_result)
print(fruits[long_names])
# Enter code here
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "grape")
long_names <- length(fruits) > 6
print(fruits[long_names])
# Enter code here
fruits <- c("apple", "banana", "kiwi", "strawberry", "orange", "grape")
long_names <- nchar(fruits) > 6
print(fruits[long_names])
