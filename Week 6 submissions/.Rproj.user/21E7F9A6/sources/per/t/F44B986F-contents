---
title: "Challenge-5"
author: "Niki"
date: "`r Sys.Date()`"
output:
  pdf_document: default
  pdf: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Questions
<br>

#### Question-1: Local Variable Shadowing 

Create an R function that defines a global variable called `x` with a value of 5. Inside the function, declare a local variable also named `x` with a value of 10. Print the value of `x` both inside and outside the function to demonstrate shadowing.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

x <- 5

sprintf("The value assigned to x outside the function is %d",x)

huehue <- function() {
  x <- 10
}

print(huehue())
print(x)

```
<br>

#### Question-2: Modify Global Variable

Create an R function that takes an argument and adds it to a global variable called `total`. Call the function multiple times with different arguments to accumulate the values in `total`.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

total <- 0

add_to_total <- function(value) {
  total <<- total + value
}

add_to_total(123)
add_to_total(9992)
add_to_total(12)

print(total)

```
<br>

#### Question-3: Global and Local Interaction 

Write an R program that includes a global variable `total` with an initial value of 100. Create a function that takes an argument, adds it to `total`, and returns the updated `total`. Demonstrate how this function interacts with the global variable.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

total <- 100

add_to_total <- function(value) {
  total <<- total + value
  return(value)
}

cat("Initial total:", total,"\n")

# Key in any number in add_to_total

cat("Total after adding", add_to_total(444), ":", total,"\n")

cat("Total after adding", add_to_total(30), ":", total,"\n")


```
<br>

#### Question-4: Nested Functions

Define a function `outer_function` that declares a local variable `x` with a value of 5. Inside `outer_function`, define another function `inner_function` that prints the value of `x`. Call both functions to show how the inner function accesses the variable from the outer function's scope.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

outer_function <- function() {
  x <- 5
  
  inner_function <- function() {
    print(x)
  }
  
  inner_function()
}

outer_function()
```
<br>

#### Question-5: Meme Generator Function

Create a function that takes a text input and generates a humorous meme with the text overlaid on an image of your choice. You can use the `magick` package for image manipulation. You can find more details about the commands offered by the package, with some examples of annotating images here: https://cran.r-project.org/web/packages/magick/vignettes/intro.html

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

knitr::include_graphics("Error message.png")

# Gives me this error :( operating system error T_T

```


<br>

#### Question-6: Text Analysis Game  

Develop a text analysis game in which the user inputs a sentence, and the R function provides statistics like the number of words, characters, and average word length. Reward the user with a "communication skill level" based on their input.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

#Type your sentence in between the inverted commas
game <- function() {
  sentence <- "i am a cat"
  
  nword <- length(strsplit(sentence, " ")[[1]])
  ncharacter <- nchar(sentence)
  avg_word_length <- nword / ncharacter
  
   communication_skill_level <- ifelse(avg_word_length < 4, "Beginner",
                                      ifelse(avg_word_length < 6, "Intermediate", "Advanced"))
  
  cat("Number of words:", nword, "\n")
  cat("Number of characters:", ncharacter, "\n")
  cat("Average word length:", avg_word_length, "\n")
  cat("Communication skill level:", communication_skill_level, "\n")
}

game()
```
<br>