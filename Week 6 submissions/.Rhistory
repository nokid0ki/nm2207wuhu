knitr::opts_chunk$set(echo = TRUE)
for (x in c(3,6,9)) {
print(x)
}
for (x in 1:8) {print (x)}
print(y[x])}
{y <- seq(from=100,to=200,by=5)
print(y[x])
}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])
}
# Enter code here
sample_sizes <- c(5,10,15,20,2500)
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[[i]] <- mean(rnorm(sample_sizes[[i]]))
}
sample_means
sample_means <- rep(0,length(sample_means))
data_list <- vector("list",length=5)
sample_means <- rep(0,length(sample_means))
data_list <- vector("list",length=5)
# Example: bad idea!
a <- 7:11
b <- 8:12
out <- rep(0L, 5)
for (i in seq_along(a)) {
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
a <- 7:11
b <- 8:12
out <- a+b
out
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
# Slide 23
sample_sizes <- c(5, 10, 15, 20, 25000)
fsd <- function(sample_sizes) {
sample_sds <- rep(0,length(sample_sizes))
for(i in seq_along(sample_sizes)) {
sample_sds[i] <- sd(rnorm(sample_sizes[i]))
}
}
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
out
}
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
out
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
return(out)
out[i] <- fun(rnorm(sample_sizes[i]))
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
# Slide 24
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
# Slide 24
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Left-hand side code: for loop
for(i in 1:5){ print(i)
}
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
print(i)
i <- i + 1 }
knitr::opts_chunk$set(echo = TRUE)
?Sys.sleep
i <- i + 1 }
# Enter code here
i <- 1
while (i <= 10) {
Sys.sleep(5s)
# Enter code here
i <- 1
while (i <= 10) {
Sys.sleep(5s)
# Enter code here
i <- 1
while (i <= 10) {
print(i)
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(5)
print(i)
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
print(cat(i,"..." )
i <- i + 1 }
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
print(cat(i,"..." ))
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
cat(i,"..." )
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
cat(" ",i,"...","/n" )
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i + 1 }
?Sys.sleep
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i + 1 }
print("Blast off!!!")
# Enter code here
i <- 1
while (i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i + 1 }
cat("Blast off!!!")
# Enter code here
i <- 10
while (i = 0) { Sys.sleep(1)
# Enter code here
i <- 10
while (i <= 0) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i - 1 }
cat("Blast off!!!")
# Enter code here
i <- 10
while (i => 10) { Sys.sleep(1)
# Enter code here
i <- 10
while (i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i - 1 }
# Enter code here
i <- 10
while (0 <= i <= 10) { Sys.sleep(1)
# Enter code here
i <- 10
while (0 <= i, i <= 10) { Sys.sleep(1)
# Enter code here
i <- 10
while (0 <= i & i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i - 1 }
cat("Blast off!!!")
# Enter code here
i <- 10
while (0 <= i & i <= 10) { Sys.sleep(1)
cat(" ",i,"...","\n" )
i <- i - 1 }
cat("Blast off!!!")
?substr
# Enter code here
var = readline(prompt = "Enter any number : ");
# convert the inputted value to an integer
var = as.integer(var);
# print the value
print(var)
?substr
# Enter code here
var = readline(prompt = "Enter any number : ");
# convert the inputted value to an integer
var = as.integer(var);
# print the value
print(var)
?substr
# Enter code here
var = readline(prompt = "Enter any number : ");
var = as.integer(var);
print(var)
?substr
# Enter code here
var = readline(prompt = "Enter any number : ");
<- word
# Enter code here
# Define the word you want to reverse
word <- "hello"
# Initialize variables
reversed_word <- ""
index <- nchar(word)
# Use a while loop to reverse the word
while (index > 0) {
reversed_word <- paste(reversed_word, substr(word, index, index), sep = "")
index <- index - 1
}
# Print the reversed word
cat("Reversed word:", reversed_word, "\n")
?paste
# Enter code here
word <- "hello"
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
cat("Reversed word:", reversed_word, "\n")
# Enter code here
word <- "chicken nugget"
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
cat("Reversed word:", reversed_word, "\n")
# Enter code here
word <- "chicken nugget"
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
cat("Reversed word:", reversed_word, "\n")
word <- "chicken nugget"
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
cat("Reversed:", reversed_word, "\n")
# Enter code here
word <- "chicken nugget"
reversed <- ""
index <- nchar(word)
while (index > 0) {
reversed <- paste(reversed, substr(word, index, index), sep = "")
index <- index - 1
}
cat("Reversed word:", reversed, "\n")
